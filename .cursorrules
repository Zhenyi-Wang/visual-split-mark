# Visual Split Mark 开发规则和注意事项

## 项目技术栈
- Nuxt 3 + TypeScript
- Naive UI
- Pinia
- JSON 文件存储
- yarn 管理依赖

## Lessons
1. 状态管理和 API 设计
   - 使用通用的方法名称（如 updateAnnotation）而不是具体的动作名称（如 addAnnotation）
   - 一个方法可以同时处理新增和更新，根据 ID 是否存在来判断
   - 避免创建过多的专用方法，保持 API 简洁

2. 临时状态管理
   - 使用专门的变量管理临时状态（如 pendingAnnotation）
   - 使用独立的变量管理表单输入（如 annotationText）
   - 在操作完成或取消时要清理临时状态
   - 注意临时状态和持久状态的区分

3. 代码组织
   - 将复杂功能拆分为独立的 composables
   - 将类型定义、常量配置和工具函数分别放在独立文件中
   - 主文件只负责协调，不包含具体业务逻辑

4. 调试和错误处理
   - 发布前清理所有调试输出
   - 使用正式的日志系统记录必要信息
   - 提供清晰的错误提示

5. 用户交互
   - 操作成功时提供反馈（如 message.success）
   - 危险操作需要确认（如删除标注）
   - 保持界面响应及时

6. 数据一致性
   - 修改数据后及时保存到存储
   - 保持内存中的状态和存储数据同步
   - 注意处理并发修改的情况

7. 命令行工具使用
   - 对于会进入交互式界面的命令（如 git diff, git log, less 等），应该加上 | cat
   - 这样可以避免在自动化环境中卡住
   - 例如：git diff | cat, git log | cat, less file.txt | cat

8. DOM 元素查找和状态管理
   - 使用 document.querySelector 直接查找特定类名的元素，而不是依赖 ref 的父元素关系
   - 在 watch 函数中使用 immediate: true 确保初始化时就能触发监听
   - 添加详细的调试日志来追踪状态更新流程
   - 使用防抖函数来优化频繁的状态更新
   - 确保在组件卸载时保存最终状态

9. 回调函数管理
   - 在初始化组件时要注意回调函数的设置顺序
   - 避免在子组件中覆盖父组件设置的回调
   - 对于没有设置回调的情况，提供默认的回调实现
   - 使用调试日志追踪回调的设置和执行流程
   - 特殊按钮（如 Add）可能不需要依赖某些状态（如 hoveredRegion），要单独处理
