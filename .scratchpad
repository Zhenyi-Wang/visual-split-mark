# 当前任务：重构渲染范围控制

## 任务分析
- 将渲染范围控制逻辑从 useWaveformDrawer 移到独立的状态管理中
- 使用 Pinia store 确保状态在多个组件间同步

## 任务进度
[X] 创建 viewport store
[X] 修改 useWaveformDrawer 使用 viewport store
[X] 修改 useAudioVisualizer 使用 viewport store
[X] 修改页面组件使用 viewport store
[X] 添加渲染范围的百分比控制
[X] 优化时间轴显示，使用整数秒刻度

## 下一步
1. 优化渲染性能
   - 只渲染可见区域的波形
   - 添加缓存机制避免重复计算
   - 优化大文件加载性能

## 注意事项
- 确保渲染范围的变化能实时反映在界面上
- 添加合适的动画效果提升用户体验
- 考虑极端情况（如音频时长很短或很长）的处理

## 已解决的问题
1. 渲染范围控制已经从组件移到 Pinia store
2. 界面显示更直观（百分比 + 具体时间）
3. 时间轴显示更清晰（整数秒刻度）

## 待解决的问题
1. 大文件加载时的性能优化
2. 波形渲染的缓存机制
3. 极端情况的处理（如很长的音频文件）

# 当前任务
修复鼠标位置到时间的转换计算问题,目前计算基于总时长而不是可视区域。

## 问题分析
1. 当前问题:
   - 鼠标位置到时间的转换使用了总时长(100%比例)
   - 没有考虑渲染区间的起始时间
   - 坐标转换逻辑分散在各处

2. 需要解决的关键点:
   - 统一坐标转换逻辑
   - 考虑视口的起始时间和可视区域
   - 保持代码的可维护性和可测试性

## 实施方案
方案一: 在 viewport store 中集中管理坐标转换
1. 在 viewport store 中添加:
   - getTimeFromX: 将 x 坐标转换为时间
   - getXFromTime: 将时间转换为 x 坐标
2. 优点:
   - 集中管理,避免重复代码
   - 与视口状态紧密集成
   - 实现简单直接
3. 缺点:
   - store 职责可能过重
   - 测试相对复杂

方案二: 创建专门的坐标转换 composable
1. 创建 useCoordinateTransform:
   - 接收 viewport 作为参数
   - 提供相同的转换方法
2. 优点:
   - 关注点分离
   - 更容易测试
   - 更灵活的复用
3. 缺点:
   - 需要额外的文件
   - 需要管理依赖注入

## 任务进度
[ ] 1. 选择并实现坐标转换方案
[ ] 2. 更新所有使用坐标转换的地方
[ ] 3. 添加必要的测试
[ ] 4. 验证功能正确性

## 注意事项
1. 保持计算的精确性
2. 考虑边界情况
3. 确保性能影响最小
4. 提供清晰的文档说明

# 当前任务
优化 canvas 渲染性能，通过控制渲染的时间范围来限制渲染内容

# 任务分析
1. 核心思路：添加 renderStartTime 和 renderEndTime 来控制渲染范围
2. 主要改动：
   - 添加渲染范围的状态管理
   - 修改绘制函数以支持范围渲染
   - 确保坐标转换和事件处理正确处理偏移
3. 关键点：
   - 保持现有功能正常工作
   - 确保性能提升
   - 维持良好的用户体验

# 实施计划
## 阶段一：添加渲染范围控制
[X] 1.1 在 useWaveformDrawer 中添加基础状态
[X] 1.2 添加渲染范围的 getter/setter
[X] 1.3 测试范围设置的正确性

## 阶段二：修改时间轴渲染
[X] 2.1 修改 drawTimeAxis 支持范围渲染
[X] 2.2 确保时间刻度正确显示
[X] 2.3 测试不同缩放级别下的显示

## 阶段三：修改波形渲染
[X] 3.1 修改 drawWaveform 支持范围渲染
[X] 3.2 添加波形数据缓存
[X] 3.3 优化内存访问和渲染性能

## 阶段四：修改标注区域渲染
[X] 4.1 修改 drawRegions 支持范围渲染
[X] 4.2 优化标注区域的性能
[X] 4.3 修复类型安全问题

## 阶段五：优化交互处理
[X] 5.1 修改事件处理以支持偏移
[X] 5.2 确保拖拽和点击正确工作
[X] 5.3 修复鼠标样式交互

## 阶段六：性能测试和优化
[ ] 6.1 测试长音频文件的性能
[ ] 6.2 测试不同操作下的响应速度
[ ] 6.3 进行必要的性能优化

# 当前阶段：阶段四完成，准备开始阶段五

# 测试要点
每个阶段完成后，需要验证：
1. 基础功能是否正常
2. 是否有明显的性能提升
3. 用户体验是否良好
4. 是否有边界情况问题

## 当前状态
- 完成了所有主要优化任务
- 修复了鼠标样式交互问题
- 所有功能正常工作

## 已完成的优化：
1. 渲染范围控制
   - 使用 viewport store 管理渲染范围
   - 优化渲染区域的计算和更新

2. 波形渲染优化
   - 添加波形数据缓存
   - 只渲染可见区域
   - 优化内存访问

3. 标注区域优化
   - 只渲染可见的标注
   - 优化标注区域的性能

4. 交互体验优化
   - 修复坐标转换
   - 优化鼠标交互
   - 改进鼠标样式反馈

## 下一步建议
1. 进行性能测试
2. 收集用户反馈
3. 考虑添加更多优化项：
   - 波形数据的分级缓存
   - 标注数据的索引优化
   - 渲染策略的进一步优化
