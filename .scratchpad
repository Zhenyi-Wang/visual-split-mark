# Visual Split Mark 项目分析与计划

## 当前任务：使用 JSON 文件存储数据

### 数据结构设计
```typescript
// 项目数据
interface ProjectData {
  projects: Project[];
  audioFiles: AudioFile[];
  annotations: Annotation[];
  settings: Record<string, string>;
  version: string;
  lastBackup?: string;
}

// 数据文件结构
storage/
  ├── data/
  │   ├── projects.json     # 项目数据
  │   └── settings.json     # 全局设置
  ├── uploads/             # 原始音频文件
  ├── converted/           # 转换后的 WAV 文件
  └── backups/            # 数据备份
```

### 步骤计划
1. 数据存储实现
   [X] 创建数据存储工具类
       - 读写 JSON 文件
       - 自动备份机制
       - 错误处理和恢复

2. 功能增强
   [X] 添加数据备份/恢复功能
   [X] 添加数据导出/导入功能
   [X] 添加错误恢复机制

### 已完成功能
1. 数据存储
   - JSON 文件读写
   - 自动备份机制
   - 错误处理和恢复

2. 状态管理
   - 加载状态管理
   - 错误状态管理
   - 数据持久化

3. API 实现
   - 备份创建 API (/api/backup/create)
   - 备份列表 API (/api/backup/list)
   - 备份恢复 API (/api/backup/restore)

4. 工具命令
   - 备份命令 (yarn backup)
   - 备份列表命令 (yarn backup:list)
   - 备份恢复命令 (yarn backup:restore)

5. 文档更新
   - 存储模块文档 (docs/dev_docs/core/storage.md)

### 总结
1. 实现了基于 JSON 文件的数据存储
2. 实现了完整的数据备份和恢复功能
3. 添加了错误处理和状态管理
4. 提供了命令行工具
5. 更新了开发文档

### 下一步建议
1. 添加数据导入/导出功能
2. 实现自动备份调度
3. 添加数据压缩功能
4. 实现增量备份 

# 音频标注页面改版计划

## 目标
将音频标注页面改为左右分栏布局，波形图竖向显示，实现更直观的时间对应关系

## 需要修改的内容
[X] 页面布局改为左右分栏
  - 左侧：波形图区域
  - 右侧：标注列表区域
[X] 波形图显示
  - 将 wavesurfer 配置修改为竖向显示
  - 调整波形图容器样式
[X] 标注列表样式
  - 调整列表容器高度以匹配波形图
  - 优化标注项的显示样式
[X] 交互逻辑
  - 更新区域选择和标注的交互方式
  - 确保播放控制和时间显示正确
  - 添加同步滚动功能

## 技术要点
1. wavesurfer.js 的竖向显示配置：通过 CSS transform 实现
2. CSS Grid/Flex 布局调整：已完成
3. 标注位置的计算逻辑调整：已完成
4. 同步滚动功能：已实现

## 已完成的改进
1. 将波形图旋转90度显示
2. 使用固定像素比例（200px/秒）
3. 实现波形图和标注列表的同步滚动
4. 优化了页面布局和样式
5. 添加了滚动条样式和交互效果

## 下一步建议
1. 添加键盘快捷键支持
2. 优化标注区域的视觉效果
3. 添加波形缩放功能
4. 实现标注的拖拽排序 

# 标注页面修改任务

## 任务说明
需要修改标注页面的功能和实现。在开始修改之前，需要充分了解：
1. 当前标注页面的实现
2. 相关组件和功能
3. 数据流和状态管理

## 信息收集计划
[X] 查看标注页面源码
[X] 查看相关组件实现
[X] 了解音频处理相关功能
[X] 了解数据存储方式
[X] 了解状态管理实现

## 当前实现分析

### 页面结构
1. 顶部工具栏
   - 音频播放控制
   - 时间显示
   - 缩放控制
2. 主要内容区
   - 波形显示区域（Canvas 实现）
   - 标注列表区域
3. 功能弹窗
   - 标注编辑弹窗
   - 删除确认弹窗

### 核心功能
1. 音频可视化
   - 使用 Canvas 绘制垂直波形
   - 支持缩放和时间轴显示
   - 支持点击跳转
2. 音频控制
   - 播放/暂停
   - 时间跳转
   - 波形缩放
3. 标注管理
   - 添加标注
   - 编辑标注
   - 删除标注
4. 辅助功能
   - Whisper API 文本识别
   - 标注数据导出

### 数据管理
1. 状态管理（Pinia）
   - 项目管理
   - 音频文件管理
   - 标注数据管理
2. 数据存储
   - JSON 文件存储
   - 自动保存机制

## 待确认事项
- 具体需要修改哪些功能？
- 是否需要保持向后兼容？
- 是否需要迁移已有数据？
- 是否需要优化性能？
- 是否需要添加新功能？ 

# useAudioVisualizer.ts 重构计划

## 问题分析
1. 文件过长(1000+行)
2. 功能混杂:
   - 音频处理
   - Canvas 绘制
   - 事件处理
   - 状态管理
   - UI 交互

## 拆分策略
将按功能模块拆分成多个独立文件:

### 1. types/audio.ts
- 定义所有类型接口
```typescript
interface RegionInfo {
  id: string
  isHandle: 'start' | 'end' | null
  isTextArea: boolean
}

interface Region {
  start: number
  end: number
  text?: string
}

interface ButtonBounds {
  x: number
  y: number
  width: number
  height: number
}

interface AudioVisualizerState {
  isPlaying: boolean
  duration: number
  currentTime: number
  pixelsPerSecond: number
  playbackRate: number
  // ...其他状态
}
```

### 2. composables/useAudioPlayer.ts
音频播放控制相关:
```typescript
export function useAudioPlayer() {
  // 音频元素相关状态和方法
  const audioContext = ref<AudioContext | null>(null)
  const audioElement = ref<HTMLAudioElement | null>(null)
  const isPlaying = ref(false)
  const duration = ref(0)
  const currentTime = ref(0)
  const playbackRate = ref(1)

  // 音频控制方法
  const initialize = async (audioFile) => {}
  const playPause = async () => {}
  const seek = (time: number) => {}
  const setPlaybackRate = (rate: number) => {}
  const destroy = () => {}

  return {
    audioContext,
    audioElement,
    isPlaying,
    duration,
    currentTime,
    playbackRate,
    initialize,
    playPause,
    seek,
    setPlaybackRate,
    destroy
  }
}
```

### 3. composables/useWaveformDrawer.ts  
波形绘制相关:
```typescript
export function useWaveformDrawer() {
  // Canvas 相关状态
  const canvas = ref<HTMLCanvasElement | null>(null)
  const canvasCtx = ref<CanvasRenderingContext2D | null>(null)
  const channelData = ref<Float32Array | null>(null)

  // 绘制方法
  const initialize = (container: HTMLElement) => {}
  const drawWaveform = () => {}
  const drawTimeAxis = () => {}
  const drawRegions = () => {}
  const drawSelection = () => {}
  const destroy = () => {}

  return {
    canvas,
    canvasCtx,
    channelData,
    initialize,
    drawWaveform,
    drawTimeAxis,
    drawRegions,
    drawSelection,
    destroy
  }
}
```

### 4. composables/useRegionManager.ts
区域管理相关:
```typescript
export function useRegionManager() {
  const regions = ref<Map<string, Region>>(new Map())
  const selectedRegion = ref<Region | null>(null)
  const hoveredRegion = ref<Region | null>(null)
  const editingAnnotation = ref<Region | null>(null)

  // 区域操作方法
  const addRegion = (annotation: Region) => {}
  const updateRegion = (annotation: Region) => {}
  const removeRegion = (id: string) => {}
  const clearRegions = () => {}

  return {
    regions,
    selectedRegion,
    hoveredRegion,
    editingAnnotation,
    addRegion,
    updateRegion,
    removeRegion,
    clearRegions
  }
}
```

### 5. composables/useEventHandler.ts
事件处理相关:
```typescript
export function useEventHandler(
  canvas: Ref<HTMLCanvasElement | null>,
  waveformDrawer: ReturnType<typeof useWaveformDrawer>,
  regionManager: ReturnType<typeof useRegionManager>
) {
  // 事件状态
  const isDragging = ref(false)
  const isDraggingAnnotation = ref(false)
  const draggingHandle = ref<'start' | 'end' | null>(null)

  // 事件处理方法
  const handleMouseDown = (e: MouseEvent) => {}
  const handleMouseMove = (e: MouseEvent) => {}
  const handleMouseUp = (e: MouseEvent) => {}
  const handleMouseLeave = (e: MouseEvent) => {}

  return {
    isDragging,
    isDraggingAnnotation,
    draggingHandle,
    initialize: () => {
      // 添加事件监听
    },
    destroy: () => {
      // 移除事件监听
    }
  }
}
```

### 6. utils/timeFormat.ts
时间格式化工具:
```typescript
export const formatTimeAxis = (seconds: number): string => {}
export const getTimeFromY = (y: number, canvas: HTMLCanvasElement): number | null => {}
```

### 7. constants/visualizer.ts
常量配置:
```typescript
export const PADDING = 30
export const TIME_AXIS_WIDTH = 50
export const WAVEFORM_WIDTH = 300
export const HANDLE_SIZE = 4
export const HANDLE_VISUAL_SIZE = 6
export const BUTTON_SIZE = 32
export const BUTTON_PADDING = 8
export const BUTTON_GAP = 8
```

## 实施步骤

### 阶段 1: 基础设施
1. 创建 types/audio.ts
2. 创建 constants/visualizer.ts
3. 创建 utils/timeFormat.ts
4. 修改主文件引用这些新文件
5. 测试基本功能

### 阶段 2: 核心功能分离
1. 创建并实现 useAudioPlayer.ts
2. 替换主文件中音频相关代码
3. 测试音频功能

### 阶段 3: 绘制功能分离
1. 创建并实现 useWaveformDrawer.ts
2. 替换主文件中绘制相关代码
3. 测试绘制功能

### 阶段 4: 区域管理分离
1. 创建并实现 useRegionManager.ts
2. 替换主文件中区域管理相关代码
3. 测试区域管理功能

### 阶段 5: 事件处理分离
1. 创建并实现 useEventHandler.ts
2. 替换主文件中事件处理相关代码
3. 测试事件处理功能

### 阶段 6: 集成与优化
1. 在主文件中组合所有分离的功能
2. 确保所有功能正常工作
3. 进行性能优化

## 预期效果
1. 代码更清晰、模块化
2. 更容易维护和测试
3. 更好的复用性
4. 性能可能略有提升(减少重绘等) 